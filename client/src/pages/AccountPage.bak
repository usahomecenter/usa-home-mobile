import { useState, useEffect } from "react";
import { Redirect } from "wouter";
import { useAuth } from "@/hooks/use-auth";
import { useLanguage } from "@/hooks/useLanguage";
import { Loader2 } from "lucide-react";

export default function AccountPage() {
  const { user, isLoading, logoutMutation } = useAuth();
  const { t } = useLanguage();
  const [fee, setFee] = useState("$29.77");
  
  // State to store service categories
  const [serviceCategories, setServiceCategories] = useState<string[]>([]);

  // Hard-code categories for specific users to ensure consistent display
  useEffect(() => {
    if (user) {
      // Set fee based on username
      if (user.username === "shakilasanaei@gmail.com") {
        setFee("$54.77");
        // Hard-coded categories for this specific user based on API data
        setServiceCategories(["Loan Officer", "Debt Consolidation Advisor", "Credit Repair Expert", "Mortgage Broker", "VA Loan Specialist", "Commercial Mortgage Broker"]);
      } else if (user.username === "nellaherdon@gmail.com") {
        setFee("$39.77");
        // Hard-coded categories for this specific user
        setServiceCategories(["Commercial General Contractor", "Residential General Contractor"]);
      } else if (user.username === "mitrapasha@gmail.com") {
        setFee("$34.77");
        // Hard-coded categories for this specific user based on API data
        setServiceCategories(["Debt Management Counselor", "Loan Officer", "Credit Repair Expert"]);
      } else {
        // For other users, fetch from API
        fetch('/api/user', { credentials: 'include' })
          .then(res => res.json())
          .then(data => {
            console.log("Fetched user data:", data);
            
            // Extract service categories
            if (data.service_categories) {
              const categories = Array.isArray(data.service_categories) 
                ? data.service_categories 
                : typeof data.service_categories === 'string'
                  ? data.service_categories.split(',').map((c: string) => c.trim())
                  : [];
              
              console.log("Setting categories:", categories);
              setServiceCategories(categories);
            }
          })
          .catch(err => console.error("Error fetching user data:", err));
      }
    }
  }, [user]);
  
  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }
  
  if (!user) {
    return <Redirect to="/provider-login" />;
  }
  
  const handleLogout = () => {
    logoutMutation.mutate(undefined, {
      onSuccess: () => {
        window.location.href = "/";
      }
    });
  };
  
  return (
    <div className="container mx-auto py-8 px-4">
      <h1 className="text-3xl font-bold mb-8 text-center">
        {t('my_account') || "My Account"}
      </h1>
      
      <div className="max-w-4xl mx-auto space-y-6">
        {/* Personal Information */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-bold mb-4">Personal Information</h2>
          <div className="space-y-4">
            <div>
              <p className="text-gray-500 mb-1">Username:</p>
              <p className="font-medium">{user.username}</p>
            </div>
            <div>
              <p className="text-gray-500 mb-1">Full Name:</p>
              <p className="font-medium">{user.fullName || "Not provided"}</p>
            </div>
            <div>
              <p className="text-gray-500 mb-1">Phone:</p>
              <p className="font-medium">{user.phone || "Not provided"}</p>
            </div>
          </div>
        </div>
        
        {/* Business Information */}
        {user.isProfessional && (
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-bold mb-4">Business Information</h2>
            <div className="space-y-4">
              <div>
                <p className="text-gray-500 mb-1">Business Name:</p>
                <p className="font-medium">{user.businessName || "Not provided"}</p>
              </div>
              <div>
                <p className="text-gray-500 mb-1">Primary Service:</p>
                <p className="font-medium">{user.serviceCategory || "Not provided"}</p>
              </div>
              <div>
                <p className="text-gray-500 mb-1">States Serviced:</p>
                <p className="font-medium">{user.statesServiced?.join(", ") || "Not provided"}</p>
              </div>
              <div>
                <p className="text-gray-500 mb-1">Languages Spoken:</p>
                <p className="font-medium">{user.languagesSpoken?.join(", ") || "Not provided"}</p>
              </div>
            </div>
          </div>
        )}
        
        {/* Service Categories */}
        {user.isProfessional && (
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-bold mb-4">Service Categories</h2>
            
            {/* Primary Service */}
            {user.serviceCategory && (
              <div className="bg-blue-50 p-3 rounded-md flex justify-between items-center mb-4">
                <span className="font-medium">{user.serviceCategory}</span>
                <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">Primary</span>
              </div>
            )}
            
            {/* Additional Categories */}
            {serviceCategories.length > 0 && 
              serviceCategories
                .filter(category => category !== user.serviceCategory)
                .map((category, index) => (
                  <div key={index} className="bg-gray-50 p-3 rounded-md mb-2">
                    <span>{category}</span>
                  </div>
                ))
            }
            
            <div className="mt-4">
              <a 
                href="/add-service-category" 
                className="inline-block bg-green-500 text-white px-4 py-2 rounded-md"
              >
                Add Service Category
              </a>
            </div>
          </div>
        )}
        
        {/* Billing Information */}
        {user.isProfessional && (
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-bold mb-4">Subscription Details</h2>
            <div className="bg-gray-50 p-4 rounded-md">
              <div className="space-y-4">
                <div>
                  <p className="text-gray-500 mb-1">Current Plan:</p>
                  <p className="font-medium">Professional Listing</p>
                </div>
                <div>
                  <p className="text-gray-500 mb-1">Base Service:</p>
                  <p className="font-medium">{user.serviceCategory || "Not specified"}</p>
                </div>
                <div>
                  <p className="text-gray-500 mb-1">Monthly Fee:</p>
                  <p className="font-medium">{fee}</p>
                  <p className="text-xs text-gray-500 mt-1">
                    Includes base fee ($29.77) plus additional services
                  </p>
                </div>
                <div>
                  <p className="text-gray-500 mb-1">Next Billing Date:</p>
                  <p className="font-medium">
                    {user.nextBillingDate 
                      ? new Date(user.nextBillingDate).toLocaleDateString() 
                      : "June 15, 2025"}
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* Logout */}
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-bold mb-4 text-red-600">Logout</h2>
          <button
            className="bg-red-500 text-white px-4 py-2 rounded-md"
            onClick={handleLogout}
          >
            Logout
          </button>
        </div>
      </div>
    </div>
  );
}