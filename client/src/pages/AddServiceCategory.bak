import { useState, useEffect } from "react";
import { Redirect, useLocation } from "wouter";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useAuth } from "@/hooks/use-auth";
import { useLanguage } from "@/hooks/useLanguage";
import { Loader2, PlusCircle, ChevronRight, CreditCard, CheckCircle } from "lucide-react";
import { Separator } from "@/components/ui/separator";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import categoryData from "@/data/categoryData";

export default function AddServiceCategory() {
  const { user, isLoading } = useAuth();
  const { t } = useLanguage();
  const { toast } = useToast();
  const [, setLocation] = useLocation();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showPaymentForm, setShowPaymentForm] = useState(false);
  
  // Payment processing state variables
  const [paymentSuccess, setPaymentSuccess] = useState(false);
  
  // Define main sections matching the homepage buttons
  const mainSections = [
    "Build Home",
    "Design Home",
    "Finance & Real Estate"
  ];
  
  // State for category selection based on homepage sections
  const [mainSection, setMainSection] = useState("");
  const [primaryCategory, setPrimaryCategory] = useState("");
  const [subCategory, setSubCategory] = useState("");
  const [service, setService] = useState("");
  
  // Payment form state
  const [formData, setFormData] = useState({
    name: '',
    cardNumber: '',
    expirationDate: '',
    cvc: '',
    zipCode: '',
    agreeToTerms: false
  });
  const [errors, setErrors] = useState<Record<string, string>>({});
  
  // Derived states
  const [availableCategories, setAvailableCategories] = useState<string[]>([]);
  const [availableSubCategories, setAvailableSubCategories] = useState<string[]>([]);
  const [availableServices, setAvailableServices] = useState<string[]>([]);
  
  // Map main sections to corresponding categories in categoryData
  const getSectionCategories = (section: string): string[] => {
    switch(section) {
      case "Build Home":
        return [
          "Construction & Building", 
          "MEP (Mechanical, Electrical, Plumbing)", 
          "Utilities & Infrastructure",
          "Renewable & Solar",
          "Energy & Building Systems",
          "Environmental & Compliance",
          "Additional Expertise"
        ];
      case "Design Home":
        return [
          "Architect",
          "Structural Engineer",
          "Civil Engineer",
          "Urban Planner",
          "Interior Designer",
          "Landscape Architect",
          "Sustainability Consultant"
        ];
      case "Finance & Real Estate":
        return [
          "Credit Repair Specialists",
          "Debt Management",
          "Mortgage & Loan Professionals",
          "Construction Finance Experts",
          "Home Improvement Financing",
          "Equity & Refinance Specialists",
          "First-Time Buyer Specialists",
          "Investment Property Specialists",
          "Real Estate Professionals",
          "Financial & Legal Advisors"
        ];
      default:
        return [];
    }
  };
  
  // Effect to update categories when main section changes
  useEffect(() => {
    if (mainSection) {
      const categories = getSectionCategories(mainSection);
      setAvailableCategories(categories);
      setPrimaryCategory("");
      setSubCategory("");
      setService("");
      setAvailableSubCategories([]);
      setAvailableServices([]);
    } else {
      setAvailableCategories([]);
      setPrimaryCategory("");
      setSubCategory("");
      setService("");
      setAvailableSubCategories([]);
      setAvailableServices([]);
    }
  }, [mainSection]);
  
  // Effect to update subcategories when primary category changes
  useEffect(() => {
    if (primaryCategory) {
      if (mainSection === "Design Home") {
        // For Design Home, handle each category with specific subcategories
        // This gives us a total of 35 subcategories across all design categories
        switch (primaryCategory) {
          case "Architect":
            setAvailableSubCategories([
              "Concept Development",
              "Schematic Design",
              "Design Development",
              "Construction Documentation",
              "3D Modeling & Visualization"
            ]);
            break;
          case "Structural Engineer":
            setAvailableSubCategories([
              "Structural Analysis",
              "Material Selection",
              "Foundation Design",
              "Seismic & Wind Analysis",
              "Reinforcement Detailing"
            ]);
            break;
          case "Civil Engineer":
            setAvailableSubCategories([
              "Site Development",
              "Drainage & Water Management",
              "Road & Infrastructure Design",
              "Geotechnical Engineering",
              "Utility Planning"
            ]);
            break;
          case "Urban Planner":
            setAvailableSubCategories([
              "Land Use Planning",
              "Zoning Regulations & Compliance",
              "Community Development Plans",
              "Transportation Planning",
              "Environmental Impact Assessments"
            ]);
            break;
          case "Interior Designer":
            setAvailableSubCategories([
              "Space Planning",
              "Furniture & Fixtures Selection",
              "Material & Finish Selection",
              "Lighting Design",
              "Acoustical Design"
            ]);
            break;
          case "Landscape Architect":
            setAvailableSubCategories([
              "Site Analysis & Master Planning",
              "Planting Design",
              "Hardscape Design",
              "Irrigation & Drainage Systems",
              "Sustainable Landscape Design"
            ]);
            break;
          case "Sustainability Consultant":
            setAvailableSubCategories([
              "LEED Certification Consulting",
              "Renewable Energy Integration",
              "Building Envelope Optimization",
              "Energy Modeling & Simulations",
              "Green Materials & Construction Practices"
            ]);
            break;
          default:
            // If no match, use the category itself
            setAvailableSubCategories([primaryCategory]);
        }
      } else if (mainSection === "Build Home") {
        // For Build Home, handle each category with specific subcategories
        // These match the main site subcategories in categoryData.ts
        switch (primaryCategory) {
          case "Construction & Building":
            setAvailableSubCategories([
              "General Contractor",
              "Foundation Specialist",
              "Framing Contractor",
              "Masonry & Bricklayer",
              "Carpentry",
              "Welding & Metal Fabrication",
              "Roofing & Cladding",
              "Window & Door Installer",
              "Insulation Contractor",
              "Drywall & Plasterer",
              "Flooring Specialist",
              "Painter & Sprayer",
              "Cabinetmaker & Millworker",
              "Pool Builder",
              "Gardening & Landscaping Expert"
            ]);
            break;
          case "MEP (Mechanical, Electrical, Plumbing)":
            setAvailableSubCategories([
              "HVAC Technician",
              "Electrician",
              "Plumber"
            ]);
            break;
          case "Utilities & Infrastructure":
            setAvailableSubCategories([
              "Utility Connection Specialist",
              "Septic System Expert"
            ]);
            break;
          case "Renewable & Solar":
            setAvailableSubCategories([
              "Solar Installer",
              "Solar Designer"
            ]);
            break;
          case "Energy & Building Systems":
            setAvailableSubCategories([
              "Home Automation Specialist"
            ]);
            break;
          case "Environmental & Compliance":
            setAvailableSubCategories([
              "LEED Consultant",
              "Environmental Impact Assessor"
            ]);
            break;
          case "Additional Expertise":
            setAvailableSubCategories([
              "Security System Installer",
              "Locksmith"
            ]);
            break;
          default:
            // If category exists in categoryData, use its subcategories
            if (categoryData[primaryCategory] && categoryData[primaryCategory].subcategories) {
              const subCats = Object.keys(categoryData[primaryCategory].subcategories || {});
              setAvailableSubCategories(subCats);
            } else {
              // Otherwise use the category itself
              setAvailableSubCategories([primaryCategory]);
            }
        }
      } else if (categoryData[primaryCategory]) {
        // For categories from the main categoryData
        const subCats = Object.keys(categoryData[primaryCategory].subcategories || {});
        setAvailableSubCategories(subCats);
      } else if (mainSection === "Finance & Real Estate") {
        // For Finance categories that might not be in main categoryData
        // Use the related finance services as subcategories based on category name
        // Full list of finance services, total 38 subcategories across all categories
        switch (primaryCategory) {
          case "Credit Repair Specialists":
            setAvailableSubCategories([
              "Credit Repair Expert", 
              "Credit Score Analyst",
              "Credit Rebuilding Advisor"
            ]);
            break;
          case "Debt Management":
            setAvailableSubCategories([
              "Debt Management Counselor",
              "Debt Settlement Negotiator",
              "Debt Consolidation Advisor"
            ]);
            break;
          case "Mortgage & Loan Professionals":
            setAvailableSubCategories([
              "Mortgage Broker", 
              "Loan Officer", 
              "Mortgage Banker", 
              "FHA Loan Specialist",
              "VA Loan Specialist"
            ]);
            break;
          case "Construction Finance Experts":
            setAvailableSubCategories([
              "Construction Loan Specialist", 
              "Building Project Financier", 
              "Architectural Finance Consultant",
              "Contractor Finance Advisor"
            ]);
            break;
          case "Home Improvement Financing":
            setAvailableSubCategories([
              "Renovation Loan Specialist",
              "Home Improvement Financial Advisor",
              "HELOC Specialist",
              "Green Improvement Financier"
            ]);
            break;
          case "Equity & Refinance Specialists":
            setAvailableSubCategories([
              "Refinance Specialist",
              "Equity Release Consultant",
              "Cash-Out Refinance Specialist"
            ]);
            break;
          case "First-Time Buyer Specialists":
            setAvailableSubCategories([
              "First-Time Homebuyer Counselor",
              "Down Payment Assistance Specialist",
              "Affordable Housing Consultant"
            ]);
            break;
          case "Investment Property Specialists":
            setAvailableSubCategories([
              "Investment Property Specialist",
              "REIT Advisor",
              "Property Portfolio Manager",
              "Real Estate Investment Consultant"
            ]);
            break;
          case "Real Estate Professionals":
            setAvailableSubCategories([
              "Real Estate Agent",
              "Property Appraiser", 
              "Escrow Officer", 
              "Real Estate Attorney"
            ]);
            break;
          case "Financial & Legal Advisors":
            setAvailableSubCategories([
              "Financial Planner",
              "Property Tax Consultant",
              "Estate Planning Attorney",
              "Investment Advisor",
              "Tax Specialist"
            ]);
            break;
          default:
            // Use the category itself as the subcategory
            setAvailableSubCategories([primaryCategory]);
        }
      } else {
        setAvailableSubCategories([]);
      }
      
      setSubCategory("");
      setService("");
      setAvailableServices([]);
    } else {
      setAvailableSubCategories([]);
      setSubCategory("");
      setService("");
      setAvailableServices([]);
    }
  }, [primaryCategory, mainSection]);
  
  // Effect to set subcategory as service
  useEffect(() => {
    if (subCategory) {
      if (mainSection === "Design Home" && primaryCategory) {
        // For design subcategories, find the appropriate third level descriptions
        if (categoryData["Design & Planning"] && 
            categoryData["Design & Planning"].subcategories[primaryCategory] && 
            categoryData["Design & Planning"].subcategories[primaryCategory].thirdLevel &&
            categoryData["Design & Planning"].subcategories[primaryCategory].thirdLevel[subCategory]) {
            
          // Use the subcategory as service
          setService(subCategory);
        } else {
          // Fallback to using the subcategory as the service
          setService(subCategory);
        }
      } else if (mainSection === "Finance & Real Estate") {
        // For finance, the subcategory is the service
        setService(subCategory);
      } else {
        // For other categories like Build, use subcategory as service
        setService(subCategory);
      }
    } else {
      setService("");
    }
  }, [subCategory, primaryCategory, mainSection]);
  
  // Current and available service categories
  const currentCategories = user?.serviceCategories || 
    (user?.serviceCategory ? [user.serviceCategory] : []);
  
  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!subCategory) {
      toast({
        title: "Selection Required",
        description: "Please select a subcategory to add",
        variant: "destructive"
      });
      return;
    }
    
    // Check if the subcategory is already in their categories
    if (currentCategories.includes(subCategory)) {
      toast({
        title: "Already Listed",
        description: `You are already listed as a ${subCategory} professional`,
        variant: "destructive"
      });
      
      // Show the Already Listed UI instead of continuing
      localStorage.setItem('alreadyListedCategory', subCategory);
      setLocation("/already-listed");
      return;
    }
    
    // Check for similar categories to prevent duplicate/related listings
    // This prevents selecting both "Electrician" and "Electrical Contractors" 
    // or "HVAC Technician" and "HVAC Contractors"
    const selectedSubCategoryLower = subCategory.toLowerCase();
    const hasRelatedCategory = currentCategories.some(category => {
      const categoryLower = category.toLowerCase();
      
      // Check if the new subcategory is a substring of an existing category
      // or an existing category is a substring of the new subcategory
      if (selectedSubCategoryLower.includes(categoryLower) || categoryLower.includes(selectedSubCategoryLower)) {
        // Only consider it a match if they share a significant word component
        // For example "Electrician" and "Electrical Contractors" both contain "Electric"
        const sharedWords = ['hvac', 'electric', 'plumb', 'roof', 'carpen', 'paint', 'mason', 
                             'floor', 'insulation', 'general contractor', 'architect'];
                             
        return sharedWords.some(word => 
          selectedSubCategoryLower.includes(word) && categoryLower.includes(word)
        );
      }
      return false;
    });
    
    if (hasRelatedCategory) {
      toast({
        title: "Similar Service Already Listed",
        description: `You already have a similar service category listed. Adding multiple related categories is not necessary.`,
        variant: "destructive"
      });
      
      // Show the Already Listed UI instead of continuing
      localStorage.setItem('alreadyListedCategory', subCategory);
      setLocation("/already-listed");
      return;
    }
    
    try {
      setIsSubmitting(true);
      
      // Store the new service category in localStorage for payment processing
      localStorage.setItem('additionalServiceCategory', subCategory);
      
      // Store the user's original primary service category
      if (user && user.serviceCategory) {
        localStorage.setItem('originalPrimaryService', user.serviceCategory);
      }
      
      // Instead of redirecting, show the payment form directly on this page
      setShowPaymentForm(true);
      setIsSubmitting(false);
      
    } catch (error) {
      toast({
        title: "Failed to Add Category",
        description: "There was an error adding the new service category",
        variant: "destructive"
      });
      console.error("Error adding service category:", error);
      setIsSubmitting(false);
    }
  };
  
  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }
  
  if (!user || !user.isProfessional) {
    return <Redirect to="/provider-login" />;
  }
  
  return (
    <div className="container mx-auto py-8 px-4">
      <h1 className="text-3xl font-bold mb-8 text-center">
        {t('add_service_category')}
      </h1>
      
      <Card className="max-w-3xl mx-auto">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <PlusCircle className="h-5 w-5 text-primary" />
            {t('select_new_service')}
          </CardTitle>
          <CardDescription>
            Add a new service category to your professional profile for $5 per additional category
          </CardDescription>
        </CardHeader>
        
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Current categories */}
            <div className="mb-6">
              <h3 className="text-lg font-medium mb-2">{t('current_categories')}:</h3>
              <div className="space-y-2">
                {currentCategories.map((category, index) => (
                  <div key={index} className="flex items-center gap-2 p-2 bg-muted rounded-md">
                    <span className="font-medium">{category}</span>
                  </div>
                ))}
              </div>
            </div>
            
            <Separator />
            
            {/* Homepage Section Selection - Enhanced Hierarchical Approach */}
            <div className="space-y-6">
              {/* Step 1: Select Main Section - Dropdown */}
              <div className="bg-muted/40 p-4 rounded-lg border border-muted">
                <h3 className="text-lg font-semibold mb-3 flex items-center">
                  <span className="flex items-center justify-center w-6 h-6 rounded-full bg-primary text-white mr-2 text-sm">1</span>
                  Select Main Section
                </h3>
                <Select 
                  value={mainSection} 
                  onValueChange={setMainSection}
                >
                  <SelectTrigger id="mainSection" className="w-full">
                    <SelectValue placeholder="Choose a main section" />
                  </SelectTrigger>
                  <SelectContent>
                    {mainSections.map((section) => (
                      <SelectItem key={section} value={section}>
                        {section}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Step 2: Select Category - Only shown if a main section is selected */}
              {mainSection && (
                <div className="bg-muted/40 p-4 rounded-lg border border-muted">
                  <h3 className="text-lg font-semibold mb-3 flex items-center">
                    <span className="flex items-center justify-center w-6 h-6 rounded-full bg-primary text-white mr-2 text-sm">2</span>
                    Select Category
                  </h3>
                  <Select 
                    value={primaryCategory} 
                    onValueChange={setPrimaryCategory}
                    disabled={!availableCategories.length}
                  >
                    <SelectTrigger id="primaryCategory" className="w-full">
                      <SelectValue placeholder="Choose a category" />
                    </SelectTrigger>
                    <SelectContent>
                      {availableCategories.map((category) => (
                        <SelectItem key={category} value={category}>
                          {category}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              )}
              
              {/* Step 3: Select Sub-Category - Only shown if a category is selected */}
              {primaryCategory && (
                <div className="bg-muted/40 p-4 rounded-lg border border-muted">
                  <h3 className="text-lg font-semibold mb-3 flex items-center">
                    <span className="flex items-center justify-center w-6 h-6 rounded-full bg-primary text-white mr-2 text-sm">3</span>
                    Select Professional Role
                  </h3>
                  <Select 
                    value={subCategory} 
                    onValueChange={setSubCategory}
                    disabled={!availableSubCategories.length}
                  >
                    <SelectTrigger id="subCategory" className="w-full">
                      <SelectValue placeholder="Choose your professional role" />
                    </SelectTrigger>
                    <SelectContent>
                      {availableSubCategories.map((subCat) => (
                        <SelectItem key={subCat} value={subCat}>
                          {subCat}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              )}
            </div>
            
            <div className="pt-4 flex justify-between">
              <Button type="button" variant="outline" onClick={() => setLocation("/my-account")}>
                Cancel
              </Button>
              
              <Button 
                type="submit" 
                className="bg-primary text-white"
                disabled={!subCategory || isSubmitting}
              >
                {isSubmitting ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Processing...
                  </>
                ) : (
                  <>
                    Continue to Payment
                    <ChevronRight className="ml-2 h-4 w-4" />
                  </>
                )}
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}